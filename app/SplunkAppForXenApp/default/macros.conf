################
#
# Index Macros
#
################

[xenapp_index]
definition = index=xenapp

[xenapp_alerts]
definition = index=xenapp_alerts

[win_index]
definition = index=xenapp_winevents

[perfmon_index]
definition = index=xenapp_perfmon

[citrix_licensing]
definition = index=citrix_licensing

####################
# Sourcetype Macros
###################

[xa_ica]
definition = sourcetype=xenapp:*:icasession

[xa_sessions_sourcetype]
definition = sourcetype=xenapp:*:session

[xa_farm_sourcetype]
definition = sourcetype=xenapp:*:farm

[xa_server_sourcetype]
definition = sourcetype=xenapp:*:server

[xa_serverhotfix_sourcetype]
definition = sourcetype=xenapp:*:serverhotfix

[xa_serverload_sourcetype]
definition = sourcetype=xenapp:*:serverload

[xa_farm_sourcetype]
definition = sourcetype=xenapp:*:farm

[xa_application_sourcetype]
definition = sourcetype=xenapp:*:application

[xa_zone_sourcetype]
definition = sourcetype=xenapp:*:zone

#####################
# Sourcetype Groups
#####################

[xa_sessiondata_sourcetype]
definition = `xa_sessions_sourcetype` OR `xa_ica`

[xa_serverdata_sourcetype]
definition = `xa_server_sourcetype` OR `xa_serverhotfix_sourcetype` OR `xa_serverload_sourcetype`

[xa_zdcdata_sourcetype]
definition = `xa_farm_sourcetype` OR `xa_zone_sourcetype` OR `xa_application_sourcetype`

[xa_server_perfmon_sourcetype]
definition = sourcetype="Perfmon:CPULoad" OR sourcetype="Perfmon:AvailableMemory" OR sourcetype="Perfmon:LogicalDisk" OR sourcetype="Perfmon:PhyscialDisk" OR sourcetype="Perfmon:NetworkInterface"

[xa_server_winevent_sourcetype]
definition = sourcetype="WinEventLog:*"

[xa_process_perfmon_sourcetype]
definition = sourcetype="Perfmon:RunningProcesses"

[xa_process_winevent_sourcetype]
definition = sourcetype="WMI:ProcessDetails" 

###############
#
# XA Macros
#
##############

[valid_sessions]
definition = Protocol="Ica" State!="Listening"

[fill_clientversion]
definition = eval ClientVersion = if(ClientVersion=="","Unknown",ClientVersion)

[fill_clientaddress]
definition = eval ClientAddress = if(ClientAddress=="","Unknown",ClientAddress)

[xa_get_user_server]
definition = `xenapp_index` `xa_sessions_sourcetype` $user$ $host$ | stats first(ServerName) as host by UserName | head 1 | fields + host

################
#
# Lookup Macros
#
################

[get_ica_devicetype]
definition = lookup ica_devicetype ClientProductId OUTPUT DeviceType as DeviceType

[get_xenapp_detail_by_servername]
definition = lookup xa_zone_farm ServerName OUTPUT FarmName ZoneName

[citrix_license_type]
definition = lookup citrix_license_type Type OUTPUT TypeName as TypeName | fillnull TypeName value="Unknown"

[citrix_license_product]
definition = lookup citrix_license_product Product OUTPUT ProductName as ProductName | fillnull ProductName value="Unknown"

####
#
# Search Macros
#
#######

[get_clients_and_devices]
definition = `xenapp_index` `xa_sessions_sourcetype` | `fill_clientversion` | table LogOnTime ServerName ClientVersion ClientProductId UserName SessionUID

[get_dc_sessionuid]
definition = stats dc(SessionUID) as count | eval range="session"

[get_dc_clientversion]
definition = stats dc(ClientVersion) as Clients | eval range="client"

[get_dc_devicetype]
definition = `get_ica_devicetype` | stats dc(DeviceType) as Devices | eval range="device"

[get_top_clientversion]
definition = stats count by ClientVersion

[get_top_devicetype]
definition = `get_ica_devicetype` | stats count by DeviceType

[get_top_clientversion]
definition = dedup SessionUID | stats count by ClientVersion

[get_client_and_devices_report]
definition = `get_ica_devicetype`

[remove_junk]
definition = fields - junk_*

##| stats Values(ClientVersion) as Clients Values(DeviceType) as Devices by ServerName | stats first(StartTime) as StartTime first(ServerName) as ServerName first(UserName) as UserName first(Clients) as Clients first(Devices) as Devices by SessionUID | eval Devices=mvjoin(split(Devices, " "), " ; ") | eval Clients=mvjoin(split(Clients, " "), " ; ")

### alerts_monitor.xml searches
[get_alerts]
definition = `xenapp_alerts` | `get_xenapp_detail_by_servername` | lookup usrexp usrexp OUTPUT Severity | stats count by _time alert_name Severity UserName Value ServerName

[alerts_count_by_severity]
definition = timechart count by Severity

[alerts_top_severity]
definition = stats sum(count) as count by Severity | head 10

[alerts_count_alertname]
definition = timechart count by alert_name

[alerts_top_users]
definition = stats sum(count) as count by UserName | head 10

[alerts_top_alertname]
definition = stats sum(count) as count by alert_name | head 10

[alerts_top_hosts]
definition = stats sum(count) as count by ServerName | head 10

[stats_count]
definition = stats count

[dc_user_range]
definition = stats dc(UserName) as users | eval range="user"

[dc_servername_range]
definition = stats dc(ServerName) as hosts | eval range="session"

[remove_junk]
definition = fields - junk_*

### User_List.xml searches
[user_list_get_sessions]
definition = `xenapp_index` `xa_sessions_sourcetype` | table LogOnTime UserName ServerName ClientProductId SessionUID 

[user_list_unique_user_session]
definition = dedup SessionUID | `get_xenapp_detail_by_servername` | `get_ica_devicetype` | stats Values(LogOnTime) as LogOnTimes Values(ServerName) as ServerNames Values(FarmName) as Farms Values(ZoneName) as Zones Values(DeviceType) as Devices Values(SessionUID) as SessionUIDs by UserName | sort UserName

### vm_list.xml searches
[vm_list_get_sessions]
definition = `xenapp_index` `xa_sessions_sourcetype` State=Active | table ServerName UserName Protocol ClientProductId SessionUID

[vm_list_unique_vm_session]
definition = `get_xenapp_detail_by_servername` | `get_ica_devicetype` | stats first(FarmName) as FarmName first(ZoneName) as ZoneName Values(Protocol) as Protocols Values(DeviceType) as Devices Values(SessionUID) as SessionUIDs by ServerName | sort ServerName

########
#
# Windows Desktop Macros
#
####

[win_errors]
definition =  `win_index` Type="Warning" OR Type="Error"

[perfmon_brief]
definition = `perfmon_index` sourcetype=Perfmon:LogicalDisk OR sourcetype=Perfmon:CPULoad OR sourcetype=Perfmon:AvailableMemory OR sourcetype=Perfmon:NetworkInterface

[perfmon_cpu]
definition = `perfmon_index` sourcetype=Perfmon:CPULoad Processor object="Processor"

[perfmon_mem]
definition = `perfmon_index` sourcetype="Perfmon:AvailableMemory" object="Memory"  Memory

[perfmon_net]
definition = `perfmon_index` sourcetype=Perfmon:NetworkInterface object="Network Interface"

[perfmon_disk]
definition = `perfmon_index` sourcetype=Perfmon:LogicalDisk object="LogicalDisk"

[perfmon_physdisk]
definition = `perfmon_index` sourcetype="Perfmon:PhysicalDisk"

[perfmon_logdisk]
definition = `perfmon_index` sourcetype="Perfmon:LogicalDisk"

[perfmon_process]
definition = `perfmon_index` sourcetype=Perfmon:runningprocesses object="Process" counter!="Elapsed Time" instance!=_Total instance!=Idle

[perfmon_ica]
definition = `perfmon_index` sourcetype="perfmon:icasession"  object="ICA Session" 

[hotfix_sys_info]
definition = `perfmon_index` sourcetype="WMI:*" (Description!="NULL" OR Caption!="NULL") | eval OS = if(sourcetype=="WMI:OSInfo",Caption,NULL) 

[wmi_installedsoftware]
definition = `win_index` sourcetype="wmi:installedsoftware"

[os_sys_info]
definition = `perfmon_index` sourcetype="WMI:OSInfo" Caption!="NULL"

[app_overview]
definition = `perfmon_index` sourcetype=perfmon:runningprocesses object="Process" counter!="Elapsed Time" instance!=_Total instance!=Idle 


########
#
#
# Conversions
#
####

[bits2mb] 
definition = eval bits = bits/1024/1024 

[get_times]
definition = convert timeformat="%m/%d/%Y %H:%M:%S" mktime(StartTime) as st | eval dur = _time - st  | convert timeformat="%m/%d/%Y %H:%M:%S" mktime(BrokeringTime) as bt   | convert timeformat="%m/%d/%Y %H:%M:%S" mktime(SessionStateChangeTime) as sest   | eval load_time = sest - bt | fillnull load_time 

[session_details_drilldown]
definition = stats  last(SessionState) as SessionState last(dur) as duration last(load_time) as load_time last(BrokeringTime) as BrokeringTime  last(CatalogName) as CatalogName last(ClientAddress) as ClientAddress last(HostingServerName) as HostingServerName last(DeviceId) as DeviceId last(client_dvc_type) as client_dvc_type last(HardwareId) as HardwareId  last(ClientName) as ClientName last(UserSID) as UserSID last(ClientVersion) as ClientVersion last(AgentVersion) as AgentVersion last(IPAddress) as IPAddress last(Protocol) as Protocol last(DesktopSID) as DesktopSID by vm_name SessionStateChangeTime

[bits2mb] 
definition = eval bits = bits/1024/1024 | eval bits = round(bits,2)

[toMB(1)]
args = bytes
definition = round($bytes$/1048576,2)
iseval = 0

[formatBytes(1)]
args = bytes
definition = if($bytes$>1099511627776, tostring(round($bytes$/1099511627776,2))+" TB", if($bytes$>1073741824, tostring(round($bytes$/1073741824,2))+" GB", if($bytes$>1048576, tostring(round($bytes$/1048576,2))+" MB", if($bytes$>1024, tostring(round($bytes$/1024))+" KB", tostring($bytes$)+" Bytes"))))
iseval = 0

###
#
# Macros for setting Thresholds
#
###


### UserExp Settings
 [usrexp_icalatency]
definition =  eval usrexp =case(LatencySessionAverage>=200,"1",LatencySessionAverage>=180,"2",LatencySessionAverage>=165,"3",LatencySessionAverage>=110,"4",LatencySessionAverage<110,"5")

[HIGHICALAT]
definition =  LatencySessionAverage>175

[usrexp_loadtime]
definition = eval usrexp = case(load_time>=60,1,load_time>=50,2,load_time>=45,3,load_time>=30,4,load_time<30,5)

[poor_loadtime]
definition =  eval session_load = if(load_time>50,"Poor","Good")

[usrexp_icabw]
definition =  eval usrexp=case(SessionBandwidth<=30,1,SessionBandwidth<=60,2,SessionBandwidth<=100,3,SessionBandwidth<=200,4,SessionBandwidth>200,5)
[LOWICABW]
definition =  SessionBandwidth<75

[usrexp_cpu]
definition = eval usrexp=case(Value>=95,1,Value>=90,2,Value>=60,3,Value>=25,4,Value<25,5)

[HIGHCPU]
definition = Value>80

[usrexp_crash]
definition = eval usrexp=if(Value=="Citrix Desktop Service",2,1)

## Less than 100MB
[usrexp_mem]
definition =  eval usrexp=case(Value<=100,1,Value<=256,2,Value<=512,3,Value<=1024,4,Value>1024,5)
[LOWMEM]
definition =  Value<104857600

[usrexp_disk]
definition =  eval usrexp=case(Value<=1024,1,Value<=1536,2,Value<=2048,3,Value<=3072,4,Value>=3072,5)

[LOWDISKPERC]
definition =  Value<25

[LOWDISKMB]
definition =  Value<1024

[HIGHIO]
definition =  Value>30

[usrexp_io]
definition =  eval usrexp=case(Value>=50,1,Value>=30,2,Value>=15,3,Value>=5,4,Value<5,5)

[HIGHIOWRITE]
definition =  Value>30

[HIGHIOREAD]
definition =  Value>30

[HIGHIOXFER]
definition =  Value>10

[HIGHTOTALIO]
definition =   search "Total Operations/sec">50

[HIGHNETSEND]
definition =  Value>5242880

[HIGHNETRECV]
definition =  Value>5242880

[HIGHNETBW]
definition =  search TotalBytes>5242880

[RAREPROC]
definition =  search hosts<4

[MissingHOTFIX]
definition = where Installed<Total

[CPUGuage]
definition =  gauge Value 0 30 70 100

[MEMGuage]
definition =  gauge bits 512 256 128 0

[trendline(2)]
args = x,y
definition = eventstats count as numevents sum($x$) as sumX sum($y$) as sumY sum(eval($x$*$y$)) as sumXY sum(eval($x$*$x$)) as sumX2 sum(eval($y$*$y$)) as sumY2 | eval slope=((numevents*sumXY)-(sumX*sumY))/((numevents*sumX2)-(sumX*sumX)) | eval yintercept=(sumY-(slope*sumX))/numevents | eval newY=(yintercept + (slope*$x$)) | eval R=((numevents*sumXY) - (sumX*sumY))/sqrt(((numevents*sumX2)-(sumX*sumX))* ((numevents*sumY2)-(sumY*sumY))) | eval R2=R*R
iseval = 0