################
#
# Index Macros
#
################

[xenapp_index]
definition = index=xenapp

[xenapp_alerts]
definition = index=xenapp_alerts

[win_index]
definition = index=xenapp_winevents

[perfmon_index]
definition = index=xenapp_perfmon

##############
#
# XA Macros
#
##############

[vdihosts] 
definition = host=*

[xa_ica]
definition = sourcetype=xenapp:*:icasession

[xa_sessions_sourcetype]
definition = sourcetype=xenapp:*:session

[xa_farm_sourcetype]
definition = sourcetype=xenapp:*:farm

####
#
# Lookup Macros
#
#######

[ica_get_devicetype]
definition = lookup ica_devicetype ClientProductId OUTPUT DeviceType as DeviceType

[session_desktop_lookup]
definition = lookup xd5_desktops vm_name OUTPUT DesktopGroupName HostingServerName CatalogName ControllerDNSName | fillnull DesktopGroupName HostingServerName CatalogName ControllerDNSName value="Unknown"  

[perfmon_desktop_lookup]
definition = lookup xd5_desktops vm_name | fillnull DesktopGroupName HostingServerName CatalogName ControllerDNSName value="Unknown"

[client_name]
#definition =  eval c_type = substr(DeviceId,0,3) | eval client_dvc_type = case(c_type == "iOS", "Apple iOS",c_type == "iPa", "iPad",c_type == "roi", "Android",c_type == "WI_","Windows Desktop Receiver",DeviceId == ClientName,"Desktop Receiver") 
definition =  eval client_dvc_type = case(c_type == "mob", "Apple iPhone",c_type == "iPa", "iPad",c_type == "roi", "Android",ClientName == ClientName,"Desktop Receiver")

########
#
# Windows Desktop Macros
#
####

[win_errors]
definition =  `win_index` Type="Warning" OR Type="Error"

[perfmon_brief]
definition = `perfmon_index` sourcetype=Perfmon:LogicalDisk OR sourcetype=Perfmon:CPULoad OR sourcetype=Perfmon:AvailableMemory OR sourcetype=Perfmon:NetworkInterface

[perfmon_cpu]
definition = `perfmon_index`  sourcetype=Perfmon:CPULoad  Processor object="Processor"

[perfmon_mem]
definition = `perfmon_index`  sourcetype="Perfmon:AvailableMemory"  object="Memory"  Memory

[perfmon_net]
definition = `perfmon_index`  sourcetype=Perfmon:NetworkInterface  object="Network Interface"

[perfmon_disk]
definition = `perfmon_index`  sourcetype=Perfmon:LogicalDisk object="LogicalDisk"

[perfmon_physdisk]
definition = `perfmon_index` sourcetype="Perfmon:PhysicalDisk"

[perfmon_logdisk]
definition = `perfmon_index` sourcetype="Perfmon:LogicalDisk"

[perfmon_process]
definition = `perfmon_index`  sourcetype=Perfmon:runningprocesses  object="Process" counter!="Elapsed Time" instance!=_Total instance!=Idle

[perfmon_ica]
definition = `perfmon_index` sourcetype="perfmon:icasession"  object="ICA Session" 

[hotfix_sys_info]
definition = `perfmon_index` sourcetype="WMI:*"  (Description!="NULL" OR Caption!="NULL")  |  eval OS = if(sourcetype=="WMI:OSInfo",Caption,NULL) 

[wmi_installedsoftware]
definition = `win_index` sourcetype="wmi:installedsoftware"

[os_sys_info]
definition = `perfmon_index` sourcetype="WMI:OSInfo" Caption!="NULL"

[app_overview]
definition =  `perfmon_index` sourcetype=perfmon:runningprocesses object="Process" counter!="Elapsed Time" instance!=_Total instance!=Idle 


########
#
#
# Conversions
#
####

[bits2mb] 
definition = eval bits = bits/1024/1024 

[get_times]
definition = convert timeformat="%m/%d/%Y %H:%M:%S" mktime(StartTime) as st | eval dur = _time - st  | convert timeformat="%m/%d/%Y %H:%M:%S" mktime(BrokeringTime) as bt   | convert timeformat="%m/%d/%Y %H:%M:%S" mktime(SessionStateChangeTime) as sest   | eval load_time = sest - bt | fillnull load_time 

[session_details_drilldown]
definition = stats  last(SessionState) as SessionState last(dur) as duration last(load_time) as load_time last(BrokeringTime) as BrokeringTime  last(CatalogName) as CatalogName last(ClientAddress) as ClientAddress last(HostingServerName) as HostingServerName last(DeviceId) as DeviceId last(client_dvc_type) as client_dvc_type last(HardwareId) as HardwareId  last(ClientName) as ClientName last(UserSID) as UserSID last(ClientVersion) as ClientVersion last(AgentVersion) as AgentVersion last(IPAddress) as IPAddress last(Protocol) as Protocol last(DesktopSID) as DesktopSID by vm_name SessionStateChangeTime

[bits2mb] 
definition = eval bits = bits/1024/1024 | eval bits = round(bits,2) 

###
#
# Macros for setting Thresholds
#
###


### UserExp Settings
 [usrexp_icalatency]
definition =  eval usrexp =case(LatencySessionAverage>=200,"1",LatencySessionAverage>=180,"2",LatencySessionAverage>=165,"3",LatencySessionAverage>=110,"4",LatencySessionAverage<110,"5")

[HIGHICALAT]
definition =  LatencySessionAverage>175

[usrexp_loadtime]
definition = eval usrexp = case(load_time>=60,1,load_time>=50,2,load_time>=45,3,load_time>=30,4,load_time<30,5)

[poor_loadtime]
definition =  eval session_load = if(load_time>50,"Poor","Good")

[usrexp_icabw]
definition =  eval usrexp=case(SessionBandwidth<=30,1,SessionBandwidth<=60,2,SessionBandwidth<=100,3,SessionBandwidth<=200,4,SessionBandwidth>200,5)
[LOWICABW]
definition =  SessionBandwidth<75

[usrexp_cpu]
definition = eval usrexp=case(Value>=95,1,Value>=90,2,Value>=60,3,Value>=25,4,Value<25,5)

[HIGHCPU]
definition = Value>80

[usrexp_crash]
definition = eval usrexp=if(Value=="Citrix Desktop Service",2,1)

## Less than 100MB
[usrexp_mem]
definition =  eval usrexp=case(Value<=100,1,Value<=256,2,Value<=512,3,Value<=1024,4,Value>1024,5)
[LOWMEM]
definition =  Value<104857600

[usrexp_disk]
definition =  eval usrexp=case(Value<=1024,1,Value<=1536,2,Value<=2048,3,Value<=3072,4,Value>=3072,5)

[LOWDISKPERC]
definition =  Value<25

[LOWDISKMB]
definition =  Value<1024

[HIGHIO]
definition =  Value>30

[usrexp_io]
definition =  eval usrexp=case(Value>=50,1,Value>=30,2,Value>=15,3,Value>=5,4,Value<5,5)

[HIGHIOWRITE]
definition =  Value>30

[HIGHIOREAD]
definition =  Value>30

[HIGHIOXFER]
definition =  Value>10

[HIGHTOTALIO]
definition =   search "Total Operations/sec">50

[HIGHNETSEND]
definition =  Value>5242880

[HIGHNETRECV]
definition =  Value>5242880

[HIGHNETBW]
definition =  search TotalBytes>5242880

[RAREPROC]
definition =  search hosts<4

[MissingHOTFIX]
definition = where Installed<Total

[CPUGuage]
definition =  gauge Value 0 30 70 100

[MEMGuage]
definition =  gauge bits 512 256 128 0

[trendline(2)]
args = x,y
definition = eventstats count as numevents sum($x$) as sumX sum($y$) as sumY sum(eval($x$*$y$)) as sumXY sum(eval($x$*$x$)) as sumX2 sum(eval($y$*$y$)) as sumY2 | eval slope=((numevents*sumXY)-(sumX*sumY))/((numevents*sumX2)-(sumX*sumX)) | eval yintercept=(sumY-(slope*sumX))/numevents | eval newY=(yintercept + (slope*$x$)) | eval R=((numevents*sumXY) - (sumX*sumY))/sqrt(((numevents*sumX2)-(sumX*sumX))* ((numevents*sumY2)-(sumY*sumY))) | eval R2=R*R
iseval = 0